rowSums(tmp_flowrec[, (i - 3):i])
} #close if-else
} #close function
) # close lapply
) # closeas.data.table
colnames(dt_contflow) <- colnames(tmp_flowrec)[1:28]
# define vector to hold staid's to keep (kp) with at least 1 group of 4
# continuous years.
tmp_kp <- c()
# loop through rows of dt_contflow and return only rows that contain 4
for(i in 1:nrow(dt_contflow)){
if(4 %in% dt_contflow[i, 2:ncol(dt_contflow)]) {
tmp_kp <- c(tmp_kp, dt_contflow[i, STAID])
}
}
# return dt_contflow stations that have at least one 4
dt_contflow <- merge(
dt_contflow[STAID %in% tmp_kp],
dt_basin_classif[,.(STAID, CLASS)],
by = "STAID"
) # close merge
# Store number of non-reference and reference gauges after filtering to stations
# with >= 4 consecutive years of flow
ref_cntyrs <- nrow(dt_contflow[CLASS == "Ref"])
nonref_cntyrs <- nrow(dt_contflow[CLASS == "Non-ref"])
# load in tables to be used in idvars
# data table of variables to use for labeling in dimension reduction and/or
# clustering
tmp_idvars <- as.data.table(openxlsx::read.xlsx(
"D:/DataWorking/GAGESii/basinchar_and_report_sept_2011/gagesII_sept30_2011_conterm.xlsx",
sheet = "Regions"))[
, .(STAID, ECO3_SITE, USDA_LRR_SITE)
]
# create data table of variables to use for labeling in dimension reduction
# and/or clustering
tmp_idvars <- data.table(
"STAID" = dt_basin_classif$STAID,
"Class" = dt_basin_classif$CLASS,
"AggEcoregion" = dt_basin_classif$AGGECOREGION,
"ECO3_Site" = tmp_idvars$ECO3_SITE,
"USDA_LRR_Site" = tmp_idvars$USDA_LRR_SITE
)
tmp_idvars
# clustering
tmp_idvars <- as.data.table(openxlsx::read.xlsx(
"D:/DataWorking/GAGESii/basinchar_and_report_sept_2011/gagesII_sept30_2011_conterm.xlsx",
sheet = "Regions"))[
, .(STAID, ECO3_SITE, USDA_LRR_SITE)
]
tmp_idvars
dt_basin_classif
columns(dt_basin_classif)
colnames(dt_basin_classif)
320+47+148-28-150
rm(list = ls(pattern = "tmp_"))
#### GAGESii_TS data
# Read in table with time series years of interest, and the related years for
# each time series variable of interest using only surrounding years of the
# actual year available
# keep only the years are represented across all variables
dt_years_ts_srndgyrs <- as.data.table(openxlsx::read.xlsx(
"D:/Projects/GAGESii_ANNstuff/DataNotes.xlsx",
sheet = "GAGESii_TS_Overlap_SrndgYrs"))[
, ':=' (LandUSENWALT_xxxx = NULL,
DamRemovals = NULL,
# ForestCanopy = NULL,
LandUseNLCD_xxxx = NULL,
# ImpervNLCD = NULL,
Timber = NULL)
]
dt_years_ts_srndgyrs <- as.data.table(
dt_years_ts_srndgyrs[
apply(
dt_years_ts_srndgyrs, 1, function(x){
!any(is.na(x))
}
),
]
)
# convert to characters
dt_years_ts_srndgyrs <- as.data.table(
apply(
dt_years_ts_srndgyrs, 2, as.character
)
)
# rename columns
colnames(dt_years_ts_srndgyrs) <- c("year",
"ag",
"NWALT",
"Housing",
"Population",
"WaterUse",
"ForestCanopy",
"NLCD")
# convert to long format
dt_years_ts_srndgyrs <- data.table::melt(
dt_years_ts_srndgyrs,
id.vars = "year",
value.name = "year_av",
measure.vars = colnames(dt_years_ts_srndgyrs)[2:8]
)
# Read in table with time series years of interest, and the related years for
# each time series variable of interest using only the nearest years
dt_years_ts_nrstyr <- as.data.table(openxlsx::read.xlsx(
"D:/Projects/GAGESii_ANNstuff/DataNotes.xlsx",
sheet = "GAGESii_TS_Overlap_NrstYr"))[
, ':=' (LandUSENWALT_xxxx = NULL,
DamRemovals = NULL,
# ForestCanopy = NULL,
# LandUseNLCD_xxxx = NULL,
ImpervNLCD = NULL,
Timber = NULL)
]
# Convert to characters
dt_years_ts_nrstyr <- as.data.table(
apply(
dt_years_ts_nrstyr, 2, as.character
)
)
# rename columns
colnames(dt_years_ts_nrstyr) <- c("year",
"ag",
"NWALT",
"Housing",
"Population",
"WaterUse",
"ForestCanopy",
"NLCD")
# convert to long format
dt_years_ts_nrstyr <- data.table::melt(
dt_years_ts_nrstyr,
id.vars = "year",
value.name = "year_av",
measure.vars = colnames(dt_years_ts_nrstyr)[2:8]
)
# same but for time series xlsx sheet
# further filter land use tabs to the years of interest
tabnames.ts <- openxlsx::getSheetNames(
"D:/DataWorking/GAGESii_TS/All_GAGESiiTS.xlsx"
)
tabnames.ts <- tabnames.ts[
!tabnames.ts %in% c(
# "ForestCanopy",
# "ImpervNLCD",
# "LandUseNLCD_2001",
# "LandUseNLCD_2006",
# "LandUseNLCD_2011",
"LandUseNLCD_Codes",
"LandUseNWALT_1974",
#"LandUseNWALT_1982",
#"LandUseNWALT_1992",
#"LandUseNWALT_2002",
#"LandUseNWALT_2012",
"LandUseNWALT_82_12",
"LandUseNWALT_Codes",
"N_P_Fertilizer",
"N_P_Manure",
"PeakFlow_Codes_Anthrop",
"Timber"
)
]
# Loop through time series tabnames and read in tabs of GAGESii_ts variables.
# Filter to the specific variables of listed in tmp_voi_ts
# Remove duplicated stations and filter to stations w/continues of years
# to assign each dt to the global env. uncomment the appropriate lines
# go parallel
#cl <- parallel::makeCluster(cl)
# parallel::clusterExport(cl, "dt_contflow")
# parallel::clusterApply(cl, library(data.table))
dt_expl_ts <- Reduce(
function(x, y) {
merge(x, y, by = "STAID", all = TRUE)
}, # close function(x, y)
lapply(
tabnames.ts, function(z) {
# assign(paste0("dt_", z),
data.table::as.data.table(
openxlsx::read.xlsx(
"D:/DataWorking/GAGESii_TS/All_GAGESiiTS.xlsx",
sheet = z) # close read.xlsx
)#[ # close as.data.table
# !duplicated(STAID)
# ][
#   STAID %chin% dt_contflow$STAID
# ]
#, envir = .GlobalEnv) # close assign
} # close function(z)
) # close lapply
#} # function(x, y)
)[ # close Reduce
!duplicated(STAID) # remove duplicated stations
][
STAID %chin% dt_contflow$STAID # keep stations w/>=4yrs cont. flow
]
# Read in names of specific vars to be used from GAGESii_ts
tmp_voi_ts <- unlist(
openxlsx::read.xlsx(
"D:/Projects/GAGESii_ANNstuff/DataNotes.xlsx",
sheet = "GAGESii_TS_list",
colNames = FALSE)
)
# define vector of colnames to subset by
tmp_sbst <- colnames(dt_expl_ts) %in% tmp_voi_ts
# subset dt_expl_ts
dt_expl_ts <- dt_expl_ts[
, ..tmp_sbst
]
# patterns to match in dt_expl_ts to convert to wide format
tmp_patterns <- c("NLCD",
"NWALT",
"imperv",
"hcrop",
"irrig",
"wu",
"PDEN",
"HDEN")
dt_expl_ts_long <- data.table::rbindlist(
lapply(
tmp_patterns, function(x) {
if(x == "NWALT") {
data.table::melt(
dt_expl_ts,
id.vars = "STAID",
measure.vars = patterns(x),
variable.factor = FALSE
)[ # close melt
, ':=' (year = substr(variable, 6, 7),
VOI = substr(variable, 9, nchar(as.vector(variable))),
variable = x
)
][ # replace two digit years with four digit years
year %chin% c("82", "92"), year := paste0("19", year)
][
year %chin% c(",02", "12"), year := paste0("20", year)
]
} else if(x == "NLCD") {
data.table::melt(
dt_expl_ts,
id.vars = "STAID",
measure.vars = patterns(x),
variable.factor = FALSE
)[ # close melt
, ':=' (year = substr(variable, 5, 6),
VOI = substr(variable, 8, nchar(as.vector(variable))),
variable = x
)
][
year %chin% c("01", "06", "11"), year := paste0("20", year)
]
} else if(x == "hcrop" | x == "irrig") { # close if
data.table::melt(
dt_expl_ts,
id.vars = "STAID",
measure.vars = patterns(x),
variable.factor = FALSE
)[ # close melt
, ':=' (year = substr(variable, 6, 9),
VOI = x,
variable = "ag"
)
]
} else if (x == "imperv") {# close else if
data.table::melt(
dt_expl_ts,
id.vars = "STAID",
measure.vars = patterns(x),
variable.factor = FALSE
)[ # close melt
, ':=' (year = substr(variable, 7, 10),
VOI = x,
variable = ifelse(nchar(as.vector(variable)) > 10, "NWALT", "NLCD")
)
]
} else if (x == "wu") { # close else if
data.table::melt(
dt_expl_ts,
id.vars = "STAID",
measure.vars = patterns(x),
variable.factor = FALSE
)[ # close melt
, ':=' (year = substr(variable, 3, 6),
VOI = x,
variable = "WaterUse"
)
]
} else if (x == "HDEN") {# close else if
data.table::melt(
dt_expl_ts,
id.vars = "STAID",
measure.vars = patterns(x),
variable.factor = FALSE
)[ # close melt
, ':=' (year = substr(variable, 6, 9),
VOI = x,
variable = "Housing"
)
]
} else if (x == "PDEN") {# close else if
data.table::melt(
dt_expl_ts,
id.vars = "STAID",
measure.vars = patterns(x),
variable.factor = FALSE
)[ # close melt
, ':=' (year = substr(variable, 6, 9),
VOI = x,
variable = "Population"
)
]
}# close else if
} # close function
) # close lapply
)# %>%  # close rbindlist
# rbind(data.table( # bind damremoval
#       "STAID" = dt_expl_ts$STAID,
#       "variable" = "DamRemoval",
#       "value" = dt_expl_ts$YearDamRemoved,
#       "year" = dt_expl_ts$YearDamRemoved,
#       "VOI" = "YearRemoved"
#       ) # close data.table
#     ) # close rbind
#### GAGESii (static) data
# Return tab names from the gagesII_sept30_2011_conterm.xlsx file
tabnames.stat <- openxlsx::getSheetNames(
"D:/DataWorking/GAGESii/basinchar_and_report_sept_2011/gagesII_sept30_2011_conterm.xlsx"
)
tabnames.stat <- tabnames.stat[
!tabnames.stat %in% c(
"Bound_QA",
"FlowRec",
"LC06_Basin",
"LC06_Mains100",
"LC06_Mains800",
"LC06_Rip100",
"LC06_Rip800",
"LC_Crops",
"Nutrient_App",
"Pest_App",
"Pop_Infrastr",
"Prot_Areas",
"Regions",
"X_Region_Names"
)
]
# Loop through tstatic tabnames and read in tabs of GAGESii variables.
# Filter to the specific variables of listed in tmp.voi
# Commented lines related to assign, can be uncommented if you would like
# each tab to be saved to its own data.table in the the global env.
dt_expl_stat <- Reduce(
merge,
lapply(
tabnames.stat, function(x) {
#assign(
#paste0("dt_", x),
as.data.table(
openxlsx::read.xlsx(
"D:/DataWorking/GAGESii/basinchar_and_report_sept_2011/gagesII_sept30_2011_conterm.xlsx",
sheet = x) # close read.xlsx
)#, # close as.data.table
#) # close assign     envir = .GlobalEnv) # close assign
} # close function
) # close lapply
)[ # close Reduce
!duplicated(STAID) # remove duplicated stations
][
STAID %in% dt_contflow$STAID # keep stations w/>=4yrs cont. flow
]
#### NOTE:
# STAID 06900050 is missing a value for HGVAR. Replacing with a 0, since the
# other soil percentages add to 100% already.
dt_expl_stat[STAID == "06900050", HGVAR := 0]
# Read in names of specific vars to be used from GAGESii_static
tmp_voi_stat<- unlist(
openxlsx::read.xlsx(
"D:/Projects/GAGESii_ANNstuff/DataNotes.xlsx",
sheet = "GAGESii_Static_list",
colNames = FALSE)
)
# define vector of colnames to subset by
tmp_sbst <- (colnames(dt_expl_stat) %in% tmp_voi_stat)
# subset dt_expl_static
dt_expl_stat <- dt_expl_stat[
, ..tmp_sbst
]
# # write filtered static vars to a csv
# fwrite(dt_expl_stat,
#        file = "D:/Projects/GAGESii_ANNstuff/Data_Out/GAGES_Static_Filtered.csv")
rm(list = ls(pattern = "tmp_"))
VOI
tmp_ts_change <- dt_expl_ts_long[!variable == "DamRemoval"
, .("StDev" = round(sd(value, na.rm = TRUE), 3),
"Range" = max(value, na.rm = TRUE) - min(value, na.rm = TRUE),
"Prcnt_Change" = 100*(value[length(value)] - (value[1]) + 1e-11)/(value[1] + 1e-11)
), # close '.' list
by = .(STAID, variable, VOI)][
Range == -Inf, Range := NA # replace -Inf with NA
]
tmp_ts_change
tmp_ts_change
# summarise change by voi
tmp_ts_chgsum <-
tmp_ts_change[,
.(StDev_Qnt05 = quantile(StDev, 0.05, na.rm = TRUE),
StDev_Qnt25 = quantile(StDev, 0.25, na.rm = TRUE),
StDev_Qnt50 = quantile(StDev, 0.50, na.rm = TRUE),
StDev_Qnt75 = quantile(StDev, 0.75, na.rm = TRUE),
StDev_Qnt90 = quantile(StDev, 0.90, na.rm = TRUE),
StDev_Qnt95 = quantile(StDev, 0.95, na.rm = TRUE),
StDev_Qnt99 = quantile(StDev, 0.99, na.rm = TRUE),
Rng_Qnt05 = quantile(Range, 0.05, na.rm = TRUE),
Rng_Qnt25 = quantile(Range, 0.25, na.rm = TRUE),
Rng_Qnt50 = quantile(Range, 0.50, na.rm = TRUE),
Rng_Qnt75 = quantile(Range, 0.75, na.rm = TRUE),
Rng_Qnt90 = quantile(Range, 0.90, na.rm = TRUE),
Rng_Qnt95 = quantile(Range, 0.95, na.rm = TRUE),
Rng_Qnt99 = quantile(Range, 0.99, na.rm = TRUE),
PrcChng_Qnt25 = quantile(Prcnt_Change, 0.25, na.rm = TRUE),
PrcChng_Qnt50 = quantile(Prcnt_Change, 0.50, na.rm = TRUE),
PrcChng_Qnt75 = quantile(Prcnt_Change, 0.75, na.rm = TRUE),
PrcChng_Qnt90 = quantile(Prcnt_Change, 0.90, na.rm = TRUE),
PrcChng_Qnt95 = quantile(Prcnt_Change, 0.95, na.rm = TRUE),
PrcChng_Qnt99 = quantile(Prcnt_Change, 0.99, na.rm = TRUE)
),
by = VOI]
tmp_ts_chgsum
dt_expl_tsf90 <- as.data.table(merge(
dt_expl_ts_long, tmp_ts_change, by = c("STAID", "variable", "VOI")#, all.x = TRUE
) %>%  # close merge
merge(
., tmp_ts_chgsum[, .(VOI, StDev_Qnt90, Rng_Qnt90, PrcChng_Qnt90)], by = "VOI"
) # close merge
)[ # close as.data.table
StDev <= StDev_Qnt90 &
Range <= Rng_Qnt90 &
Prcnt_Change <= PrcChng_Qnt90 #|
# is.na(value),
] %>%
merge(
., dt_basin_classif[,.(STAID, CLASS)],
by = "STAID"
) # close merge
dt_expl_tsf90
# Find limiting VOI (voi with least number of stations) after filtering,
# and filter the rest of the VOI to align with those stations
tmp_lngth <- dt_expl_tsf90[, length(unique(STAID)), by = VOI]
tmp_voi_min <- tmp_lngth[which(V1 == min(V1))]$VOI
tmp_lngth
dt_expl_tsf90min <- #merge(
dt_expl_tsf90[
STAID %in% dt_expl_tsf90[VOI == tmp_voi_min, STAID]
]
# return number of reference and non-reference gages after filtering based on speficied quantile.
ref_fq90 <- length(dt_expl_tsf90min[CLASS == "Ref", unique(STAID)])
nonref_fq90 <- length(dt_expl_tsf90min[CLASS == "Non-ref", unique(STAID)])
# return total number of gages after filtering
tot_fq90 <- length(dt_expl_tsf90min[, unique(STAID)])
dt_expl_tsf90
dt_expl_tsf90min
ref_init
ref_cntyrs
dt_expl_tsf90
tmp_ts_chgsum
dt_expl_tsf90
as.data.table(merge(
dt_expl_ts_long, tmp_ts_change, by = c("STAID", "variable", "VOI")#, all.x = TRUE
)
)
as.data.table(merge(
dt_expl_ts_long, tmp_ts_change, by = c("STAID", "variable", "VOI")#, all.x = TRUE
) %>%  # close merge
merge(
., tmp_ts_chgsum[, .(VOI, StDev_Qnt90, Rng_Qnt90, PrcChng_Qnt90)], by = "VOI"
) # close merge
)
as.data.table(merge(
dt_expl_ts_long, tmp_ts_change, by = c("STAID", "variable", "VOI")#, all.x = TRUE
) %>%  # close merge
merge(
., tmp_ts_chgsum[, .(VOI, StDev_Qnt90, Rng_Qnt90, PrcChng_Qnt90)], by = "VOI"
) # close merge
)
as.data.table(merge(
dt_expl_ts_long, tmp_ts_change, by = c("STAID", "variable", "VOI")#, all.x = TRUE
) %>%  # close merge
merge(
., tmp_ts_chgsum[, .(VOI, StDev_Qnt90, Rng_Qnt90, PrcChng_Qnt90)], by = "VOI"
) # close merge
)
StDev_Qnt90
unique(tmp_ts_chgsum$VOI)
dt_expl_tsf90
unique(dt_expl_tsf90$STAID)
dt_expl_tsf95 <- as.data.table(merge(
dt_expl_ts_long, tmp_ts_change, by = c("STAID", "variable", "VOI")#, all.x = TRUE
) %>%  # close merge
merge(
., tmp_ts_chgsum[, .(VOI, StDev_Qnt95, Rng_Qnt95, PrcChng_Qnt95)], by = "VOI"
) # close merge
)[ # close as.data.table
StDev <= StDev_Qnt95 &
Range <= Rng_Qnt95 &
Prcnt_Change <= PrcChng_Qnt95 #|
# is.na(value),
] %>%
merge(
., dt_basin_classif[,.(STAID, CLASS)],
by = "STAID"
) # close merge
unique(dt_expl_tsf95$STAID)
unique(dt_expl_tsf95$STAID)
unique(dt_expl_tsf90$STAID)
tmp_ts_chgsum

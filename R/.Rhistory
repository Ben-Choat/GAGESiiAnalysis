theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
aspect.ratio = 1,
legend.text = element_text(size = 14),
legend.title = element_text(size = 14))
ggsave(
filename = "D:/Projects/GAGESii_ANNstuff/Figures/Valin_MLR_Predict.png",
plot = p,
width = 6,
height = 5,
units = "in"
)
data_in <- merge(
dt_wrk_valnit,
dt_ID,
by = 'STAID'
)
p <- ggplot(data = data_in) +
geom_point(aes(x = dt_wrk_valnit$Ann_WY_ft,
y = predict_valnit,
color = AggEcoregion)) +
geom_abline(slope = 1) +
xlab('Observed') + ylab('Predicted') +
theme_bw() +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
aspect.ratio = 1,
legend.text = element_text(size = 14),
legend.title = element_text(size = 14))
ggsave(
filename = "D:/Projects/GAGESii_ANNstuff/Figures/Valnit_MLR_Predict.png",
plot = p,
width = 6,
height = 5,
units = "in"
)
rmse_valinpred
mae_valinpred
rmse_valnitpred
mae_valnitpred
knitr::opts_chunk$set(echo = TRUE)
# use renv for R and R-package version control
#if(!require(renv))(install.pacakges("renv"))
#options for the renv package
# renv::init() #initiate new project
# renv::snapshot() #store active libraries in locked env. - Run this command anytime a package is updated or added.
# renv::restore() #restore libraries to previous stored state
# pacman as a package loader
if(!require(pacman))(install.packages("pacman"))
# renv for dependency management
# data.table for data wrangling
# ggplot for visualization
# ggiraph for interactive ggplots
# plotly for interactive plots
# caret for splitting data into training, validating, and testing partitions
#   and other ML methods
pacman::p_load(renv, data.table, ggplot2, ggiraph, plotly, caret)
# monthly water yield
dt_mnthWY <- data.table::fread(
paste0(
"D:/DataWorking/USGS_discharge/monthly_WY/Monthly_WY_1976_2013.csv"
) , keepLeadingZeros = TRUE
)
# annual water yield
dt_annWY <- data.table::fread(
paste0(
"D:/DataWorking/USGS_discharge/annual_WY/Annual_WY_1976_2013.csv"
) , keepLeadingZeros = TRUE
)
# ID variables
dt_ID <- data.table::fread(
"D:/Projects/GAGESii_ANNstuff/Data_out/GAGES_idVars.csv",
keepLeadingZeros = TRUE)[
STAID %chin% dt_annWY$site_no,
]
# long-format data.table of GAGESii-ts data with only years around those available
dt_srndg <- data.table::fread(
"D:/Projects/GAGESii_ANNstuff/Data_Out/gagesii_ts/GAGESts_SurroundingYrs.csv",
keepLeadingZeros = TRUE)[
STAID %chin% dt_annWY$site_no,
]
# Set seed for any radom calculations
set.seed(100)
# get the number of stations with a number of years >= some specified number
# define number of years to be a threshold
tmp_thrsh <- c(1, 2, 3, 6, 10, 15, 20, 30, 37)
tmp_nmbstns <- sapply(
tmp_thrsh,
function(x) {sum(dt_annWY[, length(yr), by = site_no]$V1 >= x)}
)
paste0("Number of stations with more than ",
tmp_thrsh,
" years represented: ",
tmp_nmbstns,
"\n")
data_in <- data.frame(Thresh = tmp_thrsh, N_Stations = tmp_nmbstns)
p <- ggplot2::ggplot(data = data_in) +
geom_point(aes(x = as.factor(Thresh), y = N_Stations)) +
xlab("Number of consecutive years") + ylab("number of stations with at least
the threshold number of continuous years")
#ylim(c(1000, 6000))
#ggiraph::girafe(ggobj = p)
plot(p)
####
# Investigate periods of continuous data availability between specified years
# define the number of continuous years to investigate
tmp_cnt_yrs <- 14
for(i in 1976:(2013 - tmp_cnt_yrs)) {
tmp_cnt <- dt_annWY[yr %in% seq(i, i + tmp_cnt_yrs, 1), length(yr), by = site_no]
tmp_nmbyrs_prd <- nrow(tmp_cnt[V1 >= tmp_cnt_yrs+1])
cat("from ", i, "-", i+tmp_cnt_yrs, "there are ",
tmp_nmbyrs_prd,
"basins with complete records. \n")
}
# return those stations with complete records from 1998-2012
data_in <- dt_annWY[
yr %in% seq(1998, 2012, 1),
length(yr),
by = site_no]
st_cmplt_98_12 <- data_in[V1 >= 15, site_no]
# return those stations with complete records from 1980-1994
data_in <- dt_annWY[
yr %in% seq(1980, 1994, 1),
length(yr),
by = site_no]
st_cmplt_80_94 <- data_in[V1 >= 15, site_no]
sta_intsct <- sum(st_cmplt_80_94 %in% st_cmplt_98_12)
cat(paste0(
"There are \n",
length(st_cmplt_98_12),
" stations with continuous data from 1998-2012, \n and ",
length(st_cmplt_80_94),
" from 1980-1994 \n and ",
sta_intsct,
" stations have continuous data in both time frames,
'80-'94 and '98-'12' \n \n The ",
length(st_cmplt_98_12), " stations account for: \n ",
round(length(st_cmplt_98_12)/nrow(dt_ID), 4) * 100,
"% of all gages available. \n The ",
length(st_cmplt_80_94), " stations account for: \n ",
round(length(st_cmplt_80_94)/nrow(dt_ID), 4) * 100,
"% of all gages available. \n The ",
sta_intsct, " stations account for: \n ",
round(sta_intsct/nrow(dt_ID), 4) * 100,
"% of all gages available."
))
# fwrite(data.table(STAID = st_cmplt_98_12),
#        "D:/Projects/GAGESii_ANNstuff/Data_Out/Training_Stations.csv")
0.6*3211
0.4*3211
.1*1284
.25*1284
.4*1284
.6*1284
0.4*1284
0.3*1284
0.7*1284
0.3*1284
# define time period using the starting year, either 80 or 98
#st_yr <- 98
# Set seed for any random calculations
set.seed(100)
# training stations w/ id vars
#if(st_yr == 98){
###
# I ended up adding a few more training gages which is what is going on
# in the commented out lines just below here...
# old_train_id <- fread(
#   "D:/DataWorking/USGS_discharge/train_val_test/yrs_98_12/annual_WY/Ann_WY_train.csv",
#   keepLeadingZeros = TRUE,
#   select = "site_no"
#   )
# dt_train_ID <- c(unique(old_train_id$site_no),
#                  sample(st_cmplt_98_12[
#                    !st_cmplt_98_12 %chin% old_train_id$site_no
#                    ], 44))
dt_train_ID <- dt_ID[STAID %chin% st_cmplt_98_12]
###
# train_ind <- caret::createDataPartition(dt_ID[STAID %chin% st_cmplt_98_12,
#                                              AggEcoregion],
#                                     p = 0.75,
#                                     list = FALSE)
#
# dt_train_ID <- dt_ID[train_ind, ]
#
# other gages not used in
# dt_others_in <- dt_ID[STAID %chin% st_cmplt_98_12 &
#                         !STAID %chin% dt_train_ID$STAID,
#                       AggEcoregion]
#
#} # else if(st_yr == 80){
#   dt_train_ID <- dt_ID[STAID %chin% st_cmplt_80_94]
# }
# other stations w/ id vars - stations not used in training data. (_nit)
#if(st_yr == 98){
#tmp_others <- dt_ID[-train_ind,]
#} else if(st_yr == 80){
tmp_others <- dt_ID[!STAID %chin% st_cmplt_98_12]
#}
# validation stations not included in training = 60% of all gages not included
val_ind <- caret::createDataPartition(tmp_others$AggEcoregion,
p = 0.6,
list = FALSE)
dt_val_ID <- tmp_others[val_ind]
# testing stations not included in training
dt_test_ID <- tmp_others[!STAID %chin% dt_val_ID$STAID]
# Plot the distribution between ecoregions to ensure relatively consistent
# representation between the three subsets of data
cat("Data partitioning by ecoregion:")
par(mfrow = c(3, 1))
color_in <- sample(colors(), length(unique(dt_train_ID$AggEcoregion)))
b <- barplot(table(dt_train_ID$AggEcoregion),
col = color_in,
main = "Training",
ylim = c(0, 1000))
text(b, table(dt_train_ID$AggEcoregion) + 100, table(dt_train_ID$AggEcoregion),
font = 2)
b <- barplot(table(dt_val_ID$AggEcoregion),
col = color_in,
main = "Validating",
ylim = c(0, 1000))
text(b, table(dt_val_ID$AggEcoregion) + 100, table(dt_val_ID$AggEcoregion),
font = 2)
b <- barplot(table(dt_test_ID$AggEcoregion),
col = color_in,
main = "Testing",
ylim = c(0, 1000))
text(b, table(dt_test_ID$AggEcoregion) + 100, table(dt_test_ID$AggEcoregion),
font = 2)
# Plot the distribution between Classes to ensure relatively consistent
# representation between the three subsets of data
cat("Data partitioning by ecoregion:")
par(mfrow = c(3, 1))
color_in <- sample(colors(), length(unique(dt_train_ID$Class)))
b <- barplot(table(dt_train_ID$Class),
col = color_in,
main = "Training",
ylim = c(0, 3000))
text(b, table(dt_train_ID$Class) + 300, table(dt_train_ID$Class),
font = 2)
b <- barplot(table(dt_val_ID$Class),
col = color_in,
main = "Validating",
ylim = c(0, 3000))
text(b, table(dt_val_ID$Class) + 300, table(dt_val_ID$Class),
font = 2)
b <- barplot(table(dt_test_ID$Class),
col = color_in,
main = "Testing",
ylim = c(0, 3000))
text(b, table(dt_test_ID$Class) + 300, table(dt_test_ID$Class),
font = 2)
# Now read in all water yield data and subset to following subsets of data
# 1. training data
# 2. validating data (Stations not included in training data)
# 3. testing data (Stations not included in training data)
# 4. validating data (Stations included in training data)
# 5. testing data (Stations included in training data)
# monthly WY
# 1.
#if(st_yr == 98){
dt_train_mnthWY <- dt_mnthWY[
site_no %chin% dt_train_ID$STAID &
yr %in% seq(1998, 2007, 1),
]
#
# nit = not in training
# 2.
dt_val_mnthWY_nit <- dt_mnthWY[
site_no %chin% dt_val_ID$STAID &
!yr %in% c(2013) #c(seq(1976, 1997, 1)),
]
# 3.
dt_test_mnthWY_nit <- dt_mnthWY[
site_no %chin% dt_test_ID$STAID &
!yr %in% c(2013) #c(seq(1976, 1997, 1)),
]
# in = in training data
# 4.
#if(st_yr == 98){
dt_val_mnthWY_in <- dt_mnthWY[
site_no %chin% dt_train_ID$STAID &
yr %in% seq(2008, 2012, 1),
]
# }else if(st_yr == 80){
#    dt_val_mnthWY_in <- dt_mnthWY[
#     site_no %chin% dt_train_ID$STAID &
#       wtryr %in% seq(1990, 1994, 1),
#   ]
# }
# 5.
dt_test_mnthWY_in <- dt_mnthWY[
site_no %chin% dt_train_ID$STAID &
yr %in% seq(1980, 1997, 1)# c(1976, 1977, 1978, 1979, seq(1995, 2012, 1)),
]
# check that data seems consistent
# first two rows should be equal
nrow(dt_mnthWY[site_no %chin% dt_train_ID$STAID & !yr == 2013])
sum(nrow(dt_train_mnthWY) + nrow(dt_val_mnthWY_in) + nrow(dt_test_mnthWY_in))
# next two rows should be equal
nrow(dt_mnthWY[site_no %chin% tmp_others$STAID & !yr == 2013])
sum(nrow(dt_val_mnthWY_nit) + nrow(dt_test_mnthWY_nit))
# # write annual wy data to files
data.table::fwrite(
dt_train_mnthWY,
"D:/DataWorking/USGS_discharge/train_val_test/yrs_98_12/monthly_WY/Mnthly_WY_train.csv"
#"D:/DataWorking/USGS_discharge/train_val_test/yrs_80_94/monthly_WY/Mnthly_WY_train.csv"
)
data.table::fwrite(
dt_val_mnthWY_nit,
"D:/DataWorking/USGS_discharge/train_val_test/yrs_98_12/monthly_WY/Mnthly_WY_val_nit.csv"
# "D:/DataWorking/USGS_discharge/train_val_test/yrs_80_94/monthly_WY/Mnthly_WY_val_nit.csv"
)
data.table::fwrite(
dt_test_mnthWY_nit,
"D:/DataWorking/USGS_discharge/train_val_test/yrs_98_12/monthly_WY/Mnthly_WY_test_nit.csv"
#"D:/DataWorking/USGS_discharge/train_val_test/yrs_80_94/monthly_WY/Mnthly_WY_test_nit.csv"
)
data.table::fwrite(
dt_val_mnthWY_in,
"D:/DataWorking/USGS_discharge/train_val_test/yrs_98_12/monthly_WY/Mnthly_WY_val_in.csv"
# "D:/DataWorking/USGS_discharge/train_val_test/yrs_80_94/monthly_WY/Mnthly_WY_val_in.csv"
)
data.table::fwrite(
dt_test_mnthWY_in,
"D:/DataWorking/USGS_discharge/train_val_test/yrs_98_12/monthly_WY/Mnthly_WY_test_in.csv"
# "D:/DataWorking/USGS_discharge/train_val_test/yrs_80_94/monthly_WY/Mnthly_WY_test_in.csv"
)
# annual WY
# 1.
# if(st_yr == 98){
dt_train_annWY <- dt_annWY[
site_no %chin% dt_train_ID$STAID &
yr %in% seq(1998, 2007, 1),
]
# }else if(st_yr == 80){
#   dt_train_annWY <- dt_annWY[
#     site_no %chin% dt_train_ID$STAID &
#       wtryr %in% seq(1980, 1989, 1),
#   ]
# }
# nit = not in training
# 2.
dt_val_annWY_nit <- dt_annWY[
site_no %chin% dt_val_ID$STAID &
!yr == 2013,
]
# 3.
dt_test_annWY_nit <- dt_annWY[
site_no %chin% dt_test_ID$STAID &
!yr == 2013,
]
# in = in training data
# 4.
# if(yr_st == 98){
dt_val_annWY_in <- dt_annWY[
site_no %chin% dt_train_ID$STAID &
yr %in% seq(2008, 2012, 1),
]
# } else if(yr_st == 80){
#   dt_val_annWY_in <- dt_annWY[
#   site_no %chin% dt_train_ID$STAID &
#     wtryr %in% seq(1990, 1994, 1), # seq(2008, 2012, 1),
# ]
# }
# 5.
dt_test_annWY_in <- dt_annWY[
site_no %chin% dt_train_ID$STAID &
yr %in% c(seq(1980, 1997, 1)), # c(1976, 1977, 1978, 1979, seq(1995, 2012, 1)),
]
# # check that data seems consistant
# # first two rows should be equal
nrow(dt_annWY[site_no %chin% dt_train_ID$STAID & !yr == 2013])
sum(nrow(dt_train_annWY) + nrow(dt_val_annWY_in) + nrow(dt_test_annWY_in))
# next two rows should be equal
nrow(dt_annWY[!site_no %chin% dt_train_ID$STAID & !yr == 2013])
sum(nrow(dt_val_annWY_nit) + nrow(dt_test_annWY_nit))
# # write annual wy data to files
data.table::fwrite(
dt_train_annWY,
"D:/DataWorking/USGS_discharge/train_val_test/yrs_98_12/annual_WY/Ann_WY_train.csv"
#"D:/DataWorking/USGS_discharge/train_val_test/yrs_80_94/annual_WY/Ann_WY_train.csv"
)
data.table::fwrite(
dt_val_annWY_nit,
"D:/DataWorking/USGS_discharge/train_val_test/yrs_98_12/annual_WY/Ann_WY_val_nit.csv"
# "D:/DataWorking/USGS_discharge/train_val_test/yrs_80_94/annual_WY/Ann_WY_val_nit.csv"
)
data.table::fwrite(
dt_test_annWY_nit,
"D:/DataWorking/USGS_discharge/train_val_test/yrs_98_12/annual_WY/Ann_WY_test_nit.csv"
# "D:/DataWorking/USGS_discharge/train_val_test/yrs_80_94/annual_WY/Ann_WY_test_nit.csv"
)
data.table::fwrite(
dt_val_annWY_in,
"D:/DataWorking/USGS_discharge/train_val_test/yrs_98_12/annual_WY/Ann_WY_val_in.csv"
# "D:/DataWorking/USGS_discharge/train_val_test/yrs_80_94/annual_WY/Ann_WY_val_in.csv"
)
data.table::fwrite(
dt_test_annWY_in,
"D:/DataWorking/USGS_discharge/train_val_test/yrs_98_12/annual_WY/Ann_WY_test_in.csv"
# "D:/DataWorking/USGS_discharge/train_val_test/yrs_80_94/annual_WY/Ann_WY_test_in.csv"
)
#####
# daily wy
#####
# read in the individual station csv's and subset to approriate subset of data
# first addressing those stations that are being used for training
for(stn in dt_train_ID$STAID) {
# Now read in all water yield data and subset to following subsets of data
# 1. training data
# 4. validating data (Stations included in training data)
# 5. testing data (Stations included in training data)
tmp_dt <- data.table::fread(
paste0(
"D:/DataWorking/USGS_discharge/daily_WY/Daily_WY_1976_2013_",
stn,
".csv"
), keepLeadingZeros = TRUE # close paste0
) # close fread
# 1.
# if(yr_st == 98) {
tmp_train <- tmp_dt[
yr %in% seq(1998, 2007, 1),
]
# } else if(yr_st == 80) {
#   tmp_train <- tmp_dt[
#     wtryr %in% seq(1980, 1989, 1),
#     ]
# }
# 4.
# if(yr_st == 98){
tmp_val_in <- tmp_dt[
yr %in% seq(2008, 2012, 1),
]
# } else if(yr_st == 80){
#   tmp_val_in <- tmp_dt[
#     wtryr %in% seq(1990, 1994, 1),
#   ]
# }
# 5.
# if(yr_st == 98){
tmp_test_in <- tmp_dt[
yr %in% seq(1979, 1997, 1),
]
# } else if(yr_st == 80){
#   tmp_test_in <- tmp_dt[
#     wtryr %in% seq(1995, 2012, 1),
#   ]
# }
# write to new files
# train
data.table::fwrite(tmp_train,
paste0(
"D:/DataWorking/USGS_discharge/train_val_test/yrs_98_12/daily_WY/train/Daily_WY_train_",
# "D:/DataWorking/USGS_discharge/train_val_test/yrs_80_94/daily_WY/train/Daily_WY_train_",
stn,
".csv"
) # close paste0
) # close fwrite
# write to new files
# validate in
data.table::fwrite(tmp_val_in,
paste0(
"D:/DataWorking/USGS_discharge/train_val_test/yrs_98_12/daily_WY/validate/Daily_WY_valin_",
# "D:/DataWorking/USGS_discharge/train_val_test/yrs_80_94/daily_WY/validate/Daily_WY_valin_",
stn,
".csv"
) # close paste0
) # close fwrite
# write to new files
# test in
data.table::fwrite(tmp_test_in,
paste0(
"D:/DataWorking/USGS_discharge/train_val_test/yrs_98_12/daily_WY/test/Daily_WY_testin_",
# "D:/DataWorking/USGS_discharge/train_val_test/yrs_80_94/daily_WY/test/Daily_WY_testin_",
stn,
".csv"
) # close paste0
) # close fwrite
} # close for loop
# next addressing validating stations that are not being used for training
for(stn in dt_val_ID$STAID) {
# 2. validating data (Stations not included in training data)
tmp_dt <- data.table::fread(
paste0(
"D:/DataWorking/USGS_discharge/daily_WY/Daily_WY_1976_2013_",
stn,
".csv"
), keepLeadingZeros = TRUE # close paste0
) # close fread
# 2.
tmp_val_in <- tmp_dt[
!wtryr == 2013,
]
# write to new files
# validate nit
data.table::fwrite(tmp_val_in,
paste0(
"D:/DataWorking/USGS_discharge/train_val_test/yrs_98_12/daily_WY/validate/Daily_WY_valnit_",
# "D:/DataWorking/USGS_discharge/train_val_test/yrs_80_94/daily_WY/validate/Daily_WY_valnit_",
stn,
".csv"
) # close paste0
) # close fwrite
} # close for loop
df_train_ID
#                  sample(st_cmplt_98_12[
#                    !st_cmplt_98_12 %chin% old_train_id$site_no
#                    ], 44))
dt_train_ID <- dt_ID[STAID %chin% st_cmplt_98_12]
dt_train_ID

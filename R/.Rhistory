dt_ID,
by = 'STAID'
)
?geom_abline
ggplot(data = data_in) +
geom_point(aes(x = dt_wrk_valin$Ann_WY_ft, y = predict_valin)) +
geom_abline(slope = 1)
ggplot(data = data_in) +
geom_point(aes(x = dt_wrk_valin$Ann_WY_ft,
y = predict_valin,
color = AggEcoregion)) +
geom_abline(slope = 1) +
ggplot(data = data_in) +
geom_point(aes(x = dt_wrk_valin$Ann_WY_ft,
y = predict_valin,
color = AggEcoregion)) +
geom_abline(slope = 1) +
theme_bw()
p <- ggplot(data = data_in) +
geom_point(aes(x = dt_wrk_valin$Ann_WY_ft,
y = predict_valin,
color = AggEcoregion)) +
geom_abline(slope = 1) +
xlab('Observed') + ylab('Predicted') +
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
# clear all variables
rm(list=ls())
# use renv for R and R-package version control
#if(!require(renv))(install.pacakges("renv"))
#options for the renv package
# renv::init() #initiate new project
# renv::snapshot() #store active libraries in locked env. - Run this command anytime a package is updated or added.
# renv::restore() #restore libraries to previous stored state
# pacman as a package loader
if(!require(pacman))(install.packages("pacman"))
# renv for dependency management
# data.table for data wrangling
# ggplot2 for plotting
# ggpubr for arranging multiple plots
# plotly for plotting
# car for levene test
# caret for regression
# usdm for vifstep variable selection
# leaps for regression variable selection
# dunn.test for Dunn pairwise comparison of categorical vars
pacman::p_load(renv, data.table, ggplot2, ggpubr, plotly, car, corrplot, Hmisc,
caret, usdm, leaps, dunn.test)
# function to estimate number of bins for histograms
nbins.fun <- function(N.for.data.of.interest) {
floor(1 + 3.322*log10(N.for.data.of.interest))
}
# annual water yield
# training
dt_annWY_train <- data.table::fread(
paste0(
"D:/DataWorking/USGS_discharge/train_val_test/yrs_98_12/annual_WY/Ann_WY_train.csv"
) , keepLeadingZeros = TRUE
)
# validate in
dt_annWY_valin <- data.table::fread(
paste0(
"D:/DataWorking/USGS_discharge/train_val_test/yrs_98_12/annual_WY/Ann_WY_val_in.csv"
) , keepLeadingZeros = TRUE
)
# validate nit
dt_annWY_valnit <- data.table::fread(
paste0(
"D:/DataWorking/USGS_discharge/train_val_test/yrs_98_12/annual_WY/Ann_WY_val_nit.csv"
) , keepLeadingZeros = TRUE
)
# # static watershed characteristics
# dt_static <- data.table::fread(
#   "D:/Projects/GAGESii_ANNstuff/Data_Out/GAGES_Static_Filtered.csv",
#   keepLeadingZeros = TRUE
#   )
# ID variables
dt_ID <- data.table::fread(
"D:/Projects/GAGESii_ANNstuff/Data_out/GAGES_idVars.csv",
keepLeadingZeros = TRUE)
# calculate mean wy for each station
dt_annWYmn_train <- dt_annWY_train[
, .(mn_anl_ft3 = mean(Ann_WY_ft3),
mn_anl_acft = mean(Ann_WY_acft)),
by = site_no]
dt_annWYmn_valin <- dt_annWY_valin[
, .(mn_anl_ft3 = mean(Ann_WY_ft3),
mn_anl_acft = mean(Ann_WY_acft)),
by = site_no]
dt_annWYmn_valnit <- dt_annWY_valnit[
, .(mn_anl_ft3 = mean(Ann_WY_ft3),
mn_anl_acft = mean(Ann_WY_acft)),
by = site_no]
# data.table of GAGES explanatory vars
dt_expl_train <- data.table::fread(
'D:/Projects/GAGESii_ANNstuff/Data_Out/ExplVars_Model_In/All_ExplVars_Train_Interp_98_12.csv',
keepLeadingZeros = TRUE
)
dt_expl_valin <- data.table::fread(
'D:/Projects/GAGESii_ANNstuff/Data_Out/ExplVars_Model_In/All_ExplVars_ValIn_Interp_98_12.csv',
keepLeadingZeros = TRUE
)
dt_expl_valnit <- data.table::fread(
'D:/Projects/GAGESii_ANNstuff/Data_Out/ExplVars_Model_In/All_ExplVars_ValNit_Interp_98_12.csv',
keepLeadingZeros = TRUE
)
# merge explanatory vars with annual water yield vars
dt_all_train <- merge(
dt_expl_train,
dt_annWY_train,
by.x = c("STAID", "year"), by.y = c("site_no", "yr")
)[
, ':=' (site_no = NULL,
yr = NULL)
]
dt_all_valin <- merge(
dt_expl_valin,
dt_annWY_valin,
by.x = c("STAID", "year"), by.y = c("site_no", "yr")
)[
, ':=' (site_no = NULL,
yr = NULL)
]
dt_all_valnit <- merge(
dt_expl_valnit,
dt_annWY_valnit,
by.x = c("STAID", "year"), by.y = c("site_no", "yr")
)[
, ':=' (site_no = NULL,
yr = NULL)
]
# mean of all vars
dt_all_mn_train <- copy(dt_all_train)[
, lapply(.SD, mean), by = STAID
][
, ':=' (year = NULL)
]
dt_all_mn_valin <- copy(dt_all_valin)[
, lapply(.SD, mean), by = STAID
][
, ':=' (year = NULL)
]
dt_all_mn_valnit <- copy(dt_all_valnit)[
, lapply(.SD, mean), by = STAID
][
, ':=' (year = NULL)
]
# Variable types and descriptions
dt_types_descr <- fread(
"D:/Projects/GAGESii_ANNstuff/Data_Out/ExplVars_Model_In/VarTypesDescrpts.csv"
)[
, VarDescription := NULL
]
dt_types_descr[VarType == "Physical", ]$VarType <- "Bas_Morph"
# Remove stations that only have streamflow pre-1980 from expl vars
# NOTE: one station made it into water yield, but is not represented in
# explanatory variables, because the only year with discharge was before 1980
ind_rm_del <- which(!unique(dt_annWYmn_valnit$site_no) %chin% dt_all_mn_valnit$STAID)
sta_rm_del <- dt_annWYmn_valnit[ind_rm_del, site_no]
dt_all_mn_valnit <- dt_all_mn_valnit[!STAID == sta_rm_del,]
dt_all_all_valnit <- dt_all_valnit[!STAID == sta_rm_del, ]
dt_annWY_valnit <- dt_annWY_valnit[!site_no == sta_rm_del, ]
dt_annWYmn_valnit <- dt_annWYmn_valnit[!site_no == sta_rm_del, ]
dt_expl_valnit <- dt_expl_valnit[!STAID == sta_rm_del, ]
rm(list = ls(pattern = "del"))
# which variables to remove
dt_wrk_train <- copy(dt_all_mn_train)[
,Ann_WY_ft := Ann_WY_acft/(DRAIN_SQKM * 247.105)
][ # Note 274.105 acres in 1 km2 and 304.8 mm in 1 ft (* 304.8)
, ':=' (Ann_WY_acft = NULL,
Ann_WY_ft3 = NULL)
]
dt_wrk_valin <- copy(dt_all_mn_valin)[
, Ann_WY_ft := Ann_WY_acft/(DRAIN_SQKM * 247.105)
][, ':=' (Ann_WY_acft = NULL,
Ann_WY_ft3 = NULL)
]
dt_wrk_valnit <- copy(dt_all_mn_valnit)[
, Ann_WY_ft := Ann_WY_acft/(DRAIN_SQKM * 247.105)
][, ':=' (Ann_WY_acft = NULL,
Ann_WY_ft3 = NULL)
]
# look at number of various categories of gage
cat(
"Percent Development: \n Nmbr Stations: \n"
)
PercDev <- sapply(
seq(0, 100, 5),
function(x) {
c(x, nrow(dt_wrk_train[TS_NLCD_DEV_SUM <= x]))
}
)
# assign to data.table
dt_percDev <- data.table(
PercentDeveloped = PercDev[1,],
NumberStations = PercDev[2,],
RatioStations = PercDev[2,]/3214
)
print(dt_percDev)
cat(
"Percent Impervious: \n Nmbr Stations: \n"
)
PercImp <- sapply(
seq(0, 48, 2),
function(x) {
c(x, nrow(dt_wrk_train[TS_NLCD_imperv > x]))
}
)
# assign to data.table
dt_percImp <- data.table(
PercentImperv = PercImp[1,],
NumberStations = PercImp[2,],
RatioStations = PercImp[2,]/3214
)
print(dt_percImp)
# plot percent developed and impervious
ggplot(data = dt_percDev) +
geom_line(aes(x = PercentDeveloped, y = RatioStations), stat = 'identity')
set.seed(100)
# run regression
system.time({
lm_vars <- caret::train(
x = dt_wrk_train[, .SD, .SDcols = !c("STAID", "Ann_WY_ft")],
y = dt_wrk_train$Ann_WY_ft,
method = "leapSeq",
tuneGrid = data.frame(nvmax = 40)#,
#trControl = train.control
)
})
lm_vars$results
# save summary of output
lm_vars_stepwise_summary <- summary(lm_vars)
# save summary of output
lm_vars_frwrd_summary <- summary(lm_vars)
p_r2 <- ggplot(data = data.table(x = seq(1, 41, 1), y = lm_vars_stepwise_summary$rsq)) +
geom_point(aes(x = x, y = y), size = 1) +
geom_point(aes(x = x[which.max(y)], y = max(y)), color = "red", size = 4) +
ylab("R2") + xlab("Number of Variables") +
theme_bw()
# 2. Adjusted R2 vs # vars
p_adjr2 <- ggplot(data = data.table(x = seq(1, 41, 1), y = lm_vars_stepwise_summary$adjr2)) +
geom_point(aes(x = x, y = y), size = 1) +
geom_point(aes(x = x[which.max(y)], y = max(y)), color = "red", size = 4) +
ylab("Adj. R2") + xlab("Number of Variables") +
theme_bw()
# 3. BIC
p_BIC <- ggplot(data = data.table(x = seq(1, 41, 1), y = lm_vars_stepwise_summary$bic)) +
geom_point(aes(x = x, y = y),
size = 1) +
geom_point(aes(x = x[which.min(y)], y = min(y)),
color = "red",
size = 4) +
geom_text(aes(x = x[which.min(y)],
y = min(y) + 200,
label = x[which.min(y)])) +
ylab("BIC") + xlab("Number of Variables") +
theme_bw()
# 4. Mallow Cp
p_Cp <- ggplot(data = data.table(x = seq(1, 41, 1), y = lm_vars_stepwise_summary$cp)) +
geom_point(aes(x = x, y = y),
size = 1) +
geom_point(aes(x = which.min(abs(lm_vars_stepwise_summary$cp - seq(1, 41, 1))),
y = y[which.min(abs(lm_vars_stepwise_summary$cp - seq(1, 41, 1)))]),
color = "red",
size = 4) +
geom_line(aes(x = x, y = x), color = "red") +
geom_text(aes(x = which.min(abs(
lm_vars_stepwise_summary$cp - seq(1, 41, 1)
)),
y = y[which.min(abs(
lm_vars_stepwise_summary$cp - seq(1, 41, 1)
))] + 200,
label = which.min(abs(
lm_vars_stepwise_summary$cp - seq(1, 41, 1))
))) +
ylab("Mallow Cp") + xlab("Number of Variables") +
theme_bw()
p_all <- ggpubr::ggarrange(
p_r2, p_adjr2, p_BIC, p_Cp,
ncol = 2, nrow = 2
)
plot(p_all)
ggsave(
filename = "D:/Projects/GAGESii_ANNstuff/Figures/MLR_VarSel_R2_BIC_Cp.png",
p_all
)
lm_vars_stepwise_summary
lm_vars_stepwise_summary$adjr2
lm_vars_stepwise_summary$adjr2[21]
lm_vars_stepwise_summary$adjr2[36]
predict_valin <- caret::predict.train(lm_vars, dt_wrk_valin)
# validatin data not in training gages
predict_valnit <- caret::predict.train(lm_vars, dt_wrk_valnit)
caret::RMSE(predict_valin, dt_wrk_valin$Ann_WY_ft)
data_in <- merge(
dt_wrk_valin,
dt_ID,
by = 'STAID'
)
p <- ggplot(data = data_in) +
geom_point(aes(x = dt_wrk_valin$Ann_WY_ft,
y = predict_valin,
color = AggEcoregion)) +
geom_abline(slope = 1) +
xlab('Observed') + ylab('Predicted') +
theme_bw()
plot(p)
p <- ggplot(data = data_in) +
geom_point(aes(x = dt_wrk_valin$Ann_WY_ft,
y = predict_valin,
color = AggEcoregion)) +
geom_abline(slope = 1) +
xlab('Observed') + ylab('Predicted') +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
#legend.position = 'bottom',
legend.text = element_text(size = 12)) +
theme_bw()
plot(p)
p <- ggplot(data = data_in) +
geom_point(aes(x = dt_wrk_valin$Ann_WY_ft,
y = predict_valin,
color = AggEcoregion)) +
geom_abline(slope = 1) +
xlab('Observed') + ylab('Predicted') +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
aspect.ratio = 1,
legend.text = element_text(size = 14)) +
theme_bw()
plot(p)
p <- ggplot(data = data_in) +
geom_point(aes(x = dt_wrk_valin$Ann_WY_ft,
y = predict_valin,
color = AggEcoregion)) +
geom_abline(slope = 1) +
xlab('Observed') + ylab('Predicted') +
+
theme_bw()
p <- ggplot(data = data_in) +
geom_point(aes(x = dt_wrk_valin$Ann_WY_ft,
y = predict_valin,
color = AggEcoregion)) +
geom_abline(slope = 1) +
xlab('Observed') + ylab('Predicted') +
theme_bw() +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
aspect.ratio = 1,
legend.text = element_text(size = 14))
plot(p)
p <- ggplot(data = data_in) +
geom_point(aes(x = dt_wrk_valin$Ann_WY_ft,
y = predict_valin,
color = AggEcoregion)) +
geom_abline(slope = 1) +
xlab('Observed') + ylab('Predicted') +
theme_bw() +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
aspect.ratio = 1,
legend.text = element_text(size = 14),
legend.title = element_text(size = 14))
plot(p)
ggsave(
filename = "D:/Projects/GAGESAii-ANNstuff/Figures/Valin_MLR_Predict.png",
plot = p
)
ggsave(
filename = "D:/Projects/GAGESii-ANNstuff/Figures/Valin_MLR_Predict.png",
plot = p
)
ggsave(
filename = "D:/Projects/GAGESii_ANNstuff/Figures/Valin_MLR_Predict.png",
plot = p
)
rmse_temp <- caret::RMSE(predict_valin, dt_wrk_valin$Ann_WY_ft)
mae_temp <- caret::MAE(predict_valin, dt_wrk_valin$Ann_WY_ft)
mae
mae_temp
rmse_temp
rmse_valinpred <- caret::RMSE(predict_valin, dt_wrk_valin$Ann_WY_ft)
mae_valinpred <- caret::MAE(predict_valin, dt_wrk_valin$Ann_WY_ft)
data_in <- merge(
dt_wrk_valin,
dt_ID,
by = 'STAID'
)
p <- ggplot(data = data_in) +
geom_point(aes(x = dt_wrk_valin$Ann_WY_ft,
y = predict_valin,
color = AggEcoregion)) +
geom_abline(slope = 1) +
xlab('Observed') + ylab('Predicted') +
### The Code
```{r ref.label="PackagesAndFunctions", eval=FALSE}
```
theme_bw() +
```{r ref.label="explplots", eval=FALSE}
mae_valinpred <- caret::MAE(predict_valin, dt_wrk_valin$Ann_WY_ft)
# validate data not in training gages
predict_valnit <- caret::predict.train(lm_vars, dt_wrk_valnit)
rmse_valnitpred <- caret::RMSE(predict_valnit, dt_wrk_valnit$Ann_WY_ft)
mae_valnitpred <- caret::MAE(predict_valnit, dt_wrk_valnit$Ann_WY_ft)
data_in <- merge(
dt_wrk_valnit,
dt_ID,
by = 'STAID'
)
p <- ggplot(data = data_in) +
geom_point(aes(x = dt_wrk_valnit$Ann_WY_ft,
y = predict_valnit,
color = AggEcoregion)) +
geom_abline(slope = 1) +
xlab('Observed') + ylab('Predicted') +
theme_bw() +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
aspect.ratio = 1,
legend.text = element_text(size = 14),
legend.title = element_text(size = 14))
plot(p)
ggsave(
filename = "D:/Projects/GAGESii_ANNstuff/Figures/Valnit_MLR_Predict.png",
plot = p
)
rmse_valinpred
mae_valinpred
?ggsave
ggsave(
filename = "D:/Projects/GAGESii_ANNstuff/Figures/Valnit_MLR_Predict.png",
plot = p,
width = 5,
height = 5,
units = "in"
)
data_in <- merge(
dt_wrk_valin,
dt_ID,
by = 'STAID'
)
p <- ggplot(data = data_in) +
geom_point(aes(x = dt_wrk_valin$Ann_WY_ft,
y = predict_valin,
color = AggEcoregion)) +
geom_abline(slope = 1) +
xlab('Observed') + ylab('Predicted') +
theme_bw() +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
aspect.ratio = 1,
legend.text = element_text(size = 14),
legend.title = element_text(size = 14))
ggsave(
filename = "D:/Projects/GAGESii_ANNstuff/Figures/Valin_MLR_Predict.png",
plot = p,
width = 5,
height = 5,
units = "in"
)
data_in <- merge(
dt_wrk_valin,
dt_ID,
by = 'STAID'
)
p <- ggplot(data = data_in) +
geom_point(aes(x = dt_wrk_valin$Ann_WY_ft,
y = predict_valin,
color = AggEcoregion)) +
geom_abline(slope = 1) +
xlab('Observed') + ylab('Predicted') +
theme_bw() +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
aspect.ratio = 1,
legend.text = element_text(size = 14),
legend.title = element_text(size = 14))
ggsave(
filename = "D:/Projects/GAGESii_ANNstuff/Figures/Valin_MLR_Predict.png",
plot = p,
width = 6,
height = 5,
units = "in"
)
data_in <- merge(
dt_wrk_valnit,
dt_ID,
by = 'STAID'
)
p <- ggplot(data = data_in) +
geom_point(aes(x = dt_wrk_valnit$Ann_WY_ft,
y = predict_valnit,
color = AggEcoregion)) +
geom_abline(slope = 1) +
xlab('Observed') + ylab('Predicted') +
theme_bw() +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
aspect.ratio = 1,
legend.text = element_text(size = 14),
legend.title = element_text(size = 14))
ggsave(
filename = "D:/Projects/GAGESii_ANNstuff/Figures/Valnit_MLR_Predict.png",
plot = p,
width = 6,
height = 5,
units = "in"
)
rmse_valinpred
mae_valinpred
rmse_valnitpred
mae_valnitpred

"0","# use renv for R and R-package version control"
"0","# see here for information on how to usD: "
"0","# https://rstudio.github.io/renv/articles/renv.html"
"0","# or herD:"
"0","# https://www.rstudio.com/blog/renv-project-environments-for-r/"
"0",""
"0","#if(!require(renv))(install.pacakges(""renv""))"
"0","#options for the renv package"
"0",""
"0","# renv::init() #initiate new project"
"0","# renv::snapshot() #store active libraries in locked env. - Run this command anytime a package is updated or added."
"0","# renv::restore() #restore libraries to previous stored state"
"0",""
"0",""
"0","# pacman as a package loader"
"0","if(!require(pacman))(install.packages(""pacman""))"
"0",""
"0","# renv for dependency management"
"0","# data.table for data wrangling"
"0","# dplyr for some data wrangling"
"0","# readxl for reading excel files"
"0","# ggplot for visualization"
"0","# plotly for interactive plots"
"0","# parallel for parallelized lapply families"
"0","# doMC for parallel execution (only for linux and osx)"
"0","# doParallel for foreach support"
"0","pacman::p_load(renv, data.table, dplyr, openxlsx, ggplot2, plotly, "
"0","               parallel, doParallel) #foreach, "
"0",""
"0",""
"0","# Editing and repurposing ecdf interpolation function from CIVE622 to interpolate time"
"0","# series data between years available"
"0",""
"0","int_fun <- function(x, dt.name, xcol = ""year"", ycol = ""VOI"") {"
"0","  # x = year to get the complimentary value for"
"0","  # dt.name = name of data.table or data.frame"
"0","  # xcol = colummn with x-variables (e.g., discharge)"
"0","  # ycol = column with y-variable (e.g, non-exceedence probability)"
"0","  if(any("
"0","    sapply("
"0","      c(x, dt.name[xcol], dt.name[ycol]), is.factor))) {"
"0","    stop(""None of the inputs can be a factor"")"
"0","  }"
"0","  "
"0","  x = as.numeric(x)"
"0","  "
"0","    if(x %in% as.numeric(dt.name[[xcol]])) {"
"0","      na.omit(dt.name[[ycol]][which(dt.name[[xcol]] == x)])[1]"
"0","  "
"0","      "
"0","    }else if(x < min(as.numeric(dt.name[[xcol]]), na.rm = TRUE)){"
"0","      x1 <- as.numeric(unique(dt.name[[xcol]])[1])"
"0","      x2 <- as.numeric(unique(dt.name[[xcol]])[2])"
"0","      y1 <- as.numeric(na.omit(dt.name[[ycol]])[which(dt.name[[xcol]] == x1)[1]])"
"0","      y2 <- as.numeric(na.omit(dt.name[[ycol]])[which(dt.name[[xcol]] == x2)[1]])"
"0","      "
"0","      y1 + ((x-x1)/(x2-x1))*(y2-y1)"
"0","        "
"0","    }else if(x > max(as.numeric(dt.name[[xcol]]), na.rm = TRUE)) {"
"0","      x1 <- as.numeric(unique(na.omit(dt.name[[xcol]]))[length(unique(na.omit(dt.name[[xcol]])))-1])"
"0","      x2 <- as.numeric(unique(na.omit(dt.name[[xcol]]))[length(unique(na.omit(dt.name[[xcol]])))])"
"0","      y1 <- as.numeric(na.omit(dt.name[[ycol]])[which(dt.name[[xcol]] == x1)[1]])"
"0","      y2 <- as.numeric(na.omit(dt.name[[ycol]])[which(dt.name[[xcol]] == x2)[1]])"
"0","      # y1 <- as.numeric(na.omit(dt.name[[ycol]])[length(dt.name[[xcol]])-1])"
"0","      # y2 <- as.numeric(na.omit(dt.name[[ycol]])[length(dt.name[[xcol]])])"
"0",""
"0","      y1 + ((x-x1)/(x2-x1))*(y2-y1)"
"0","        "
"0","    }else{"
"0","      x1 <- as.numeric(dt.name[[xcol]][max(which(dt.name[[xcol]] <= x), "
"0","                                           na.rm = TRUE)])"
"0","      x2 <- as.numeric(dt.name[[xcol]][min(which(dt.name[[xcol]] >= x), "
"0","                                           na.rm = TRUE)])"
"0","      y1 <- as.numeric(dt.name[[ycol]][max(which(dt.name[[xcol]] <= x), "
"0","                           na.rm = TRUE)])"
"0","      y2 <- as.numeric(dt.name[[ycol]][min(which(dt.name[[xcol]] >= x), "
"0","                                           na.rm = TRUE)])"
"0","      "
"0","      y1 + ((x-x1)/(x2-x1))*(y2-y1)"
"0","    }"
"0","}"
"0",""
